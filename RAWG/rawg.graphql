extend type Query {
  Game (id:ID!): Game
  Games(search: String): [Game]
}

type Game @key(fields: "id") @key(fields: "PSN_ID") @key(fields: "XBOX_ID") @key(fields: "STEAM_ID") {
  id: ID!
  slug: String!
  name: String!
  platforms: [RawPlatform]
  stores: [RawStore]
  released: String
  tba: Boolean
  background_image: String
  rating: Float
  rating_top: Int
  ratings: [RawRating]
  ratings_count: Int
  reviews_text_count: Int
  added: Int
  added_by_status: AddedStatus
  metacritic: Int
  playtime: Int
  suggestions_count: Int
  score: String
  clip: Clip
  reviews_count: Int
  saturated_color: String
  dominant_color: String
  short_screenshots: [RawShortScreenshot]
  parent_platform:  [RawPlatform]
  genres: [RawGenre]
  PSN_ID: ID
  XBOX_ID: ID
  STEAM_ID: ID
}

type RawShortScreenshot {
  id: Int
  image: String
}

type Clip {
  clip: String
  video: String
  preview: String
}

type RawStore {
  id: Int
  store: StoreMetadata
  url_en: String
  url_ru: String
}

type StoreMetadata {
  id: Int
  name: String
  slug: String
  domain: String
  games_count: Int
  image_background: String
}

type RawGenre {
  id: Int
  name: String
  slug: String
}


type RawPlatform {
  platform: Platform
  released_at: String
  requirements_en: RawRequirements
  requirements_ru: RawRequirements
}

type RawRequirements {
  minimum: String
  recommended: String
}

type Requirements {
  minimum: String
  recommended: String
}

type Platform {
  id: Int
  name: String!
  slug: String!
  image: String
  year_end: String
  year_start: String
  games_count: Int
  image_background: String
}

type AddedStatus {
  yet: Int
  owned: Int
  beaten: Int
  toplay: Int
  dropped: Int
  playing: Int
}

type RawRating {
  id: Int
  title: String!
  count: Int
  percent: Float
}